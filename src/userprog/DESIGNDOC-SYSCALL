                      +----------------------------+
       	              |          CS 450            |
                      |   PROJECT 3: SYSTEM CALLS  |
                      |      DESIGN DOCUMENT       |
                      +----------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Geoffrey Wright <wrigh2ga@dukes.jmu.edu>
Ryan Hurst <hurstrc@dukes.jmu.edu>
Elliott Germanovich <germanet@dukes.jmu.edu>
Alan Schexnayder <schexnat@dukes.jmu.edu>


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, please give 
>> them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

CONCERNING READER/WRITERS: Our reader writer implimentation follows the
given solution on the project guidelines page: 
http://w3.cs.jmu.edu/buchhofp/class/cs450_fa18/project3.html

			     SYSTEM CALLS
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

process.h
	struct process_control_block (NEW): Structure to hold data items
	and sync measures for processess.
		->pid_t pid: process's unique ID, 1 to 1 with tid.

		->int exit_status: Process' exit status migrated from PA2.

		->const char* cmd_line: added for new process_execute methodology.
		Executable line passed through pcb.

		->struct thread *parent: pointer to this thread's parent thread.

		->struct list_elem child_elem: child List element for thread's
		child_list.

		->bool parent_waiting: to show that a parent is waiting on this
		child.

		->bool child_exit: to notify a process that a child has exited.

		->bool orphan_flag: to tell if a child process is orphaned.

		->struct semaphore process_init_sema: semaphore used to control
		waiting for a process to be loaded between process_execute and
		start_process.

		->struct semaphore process_wait_sema: used for parental waiting
		for a child to exit.

	typedef int pid_t: Process ID.

	#define PID_ERROR ((pid_t) -1): To notify failure.

	#define PID_INIT  ((pid_t) -2): To notify not yet initialized.

threads.h
	struct thread
		->struct process_control_block pcb: process control block for
		a process tied to a kernel thread.

		->struct list child_list: a list of child processes for a process
		maintained by a kernel thread.

	struct list file_list: list of process' open files.

	int fd: number of total file descriptors on the system.

syscall.c
	struct semaphore write_allowed: For writers end of readers/writers

	struct lock mutex: used for locking in reader/writers problem

	global int reader_underscore count: keeps track of number or readers.

syscall.h
	struct lock filesys: A lock to control access to the file system.

	#define CLOSE_ALL_FILES -1: macro that can be used to close all
	files in a process' file_list.


>> A2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are associated with files through the use of the
open_file struct in syscall.h. This ties a file descriptor to a
file struct file element for the file_list declaired in threads.h

To this point, our implementation has all threads managing a list of
files they have open. This makes file discriptors unique to the
process.

There is also a variable int fd in thread.h that keeps track of all
open files on the system.

---- ALGORITHMS ----

>> A3: Describe your code for reading and writing user data from the
>> kernel.

First and formost when the systemcall handler is called we check the
passed pointer to be a valid virtual address and that is actually
points to a page of the user process using pintos built-n
pagedir_get_page which returns a page pointer only if the virtual
address ties to a page of the process' page directory.

We have a helper function in syscall.c named get_arguments that will
then read the arguments off the user stack. It reads the appropriate
number of arguments off the stack placing them in and args[] of proper
size. This decision was made to simplify access to the arguments
themselves and also continues to do address checks.

When dealing with buffers concerning users each buffer byte address
is checked in much the same way for validity.

As per the intel 32bit architecture all return values of the system
call are passed to the interrupt frame eax register.

>> A4: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

The wait syscall, as implemented, calls process_wait in process.c
where the majority of the logic is implemented. There the calling
thread's child list is itterated over grabbing the PCB's of every
child if children are present in the list. When a PCB->PID is found
that matched the process to be waited on it breaks the search. The
seach will end if the list is empty or if no appropriate child is
found as well.

After this step checks are performed if the PCB pointer is null or 
if the caller has already declaired waiting status on the subject.
If everything proceeds successfully the caller declaires that it is
waiting on the child and if the child has not yet exited, blocks on
the child's PBC->process_wait_sema.

When the parent process is woken up by the child it is waiting on,
this is when it interacts with process termination. If the child
has signaled on PCB->process_wait_sema it is assumed that the child
has exited and this is checked. Even though the child has exited it's
pcb is maintained in memory for cases such as this. The parent is
free to read the exit status of the child from its PCB and then
able to free(the PCB's memory page).

>> A5: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We developed a slew of helper functions to verify user imput and
terminate offending accesses. They are check_address,
mem_access_failure, user_to_kernel_ptr, get_arguments.

*get_arguments attempts to read off items from the user stack. This
function calls check_address on each item to see if the item is NULL,
a valid user virtual address, and not outside the bounds of user memory.
check_address will call mem_access_failure if an invalid pointer is found
releasing held locks and terminating the thread.
	Call Order: [get_arguments->check_address->mem_access_failure]

*Simmilary user_to_kernel_ptr tries check the pointer of a given
argument like the one passed to exec and then get a kernel pointer
for the item. Similarly the call order is as follows:
	Call Order: [user_to_kernel_ptr->check_address->mem_access_failure]

UPDATE(11/9/18): userprog/exception.c
The page fault handler has been updated to handle invalid dereferencing of
pointers in user processes referring to restricted memory. This also catches
the assigning of variables in user programs to restricted memory members.
When any of these scinarios occur a page fault will happen, but it is caught
and terminates the offending program instead of allowing the system to crash.

---- SYNCHRONIZATION ----

>> A6: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

To handle this process_execute allocates page memory to create a new
PCB for a soon to be created process and initializes all of its 
members indicated in [A1]; the key member for loading being
process_init_sema. After the call to thread_create the parent
creating process will decrement this new PCB->process_init_sema
waiting for the child to load and signal on this semaphore that it
has finished loading. If the signaling and load is successful it adds
the new child process to it's child list. If load was not successful
the parent is still signaled but is returned a PID_ERROR.

In essence the pid value returned denotes success or failure. Also,
however, if a load attempt fails, the thread will be exited. This
will go through the procedure of setting the child_exit and
orphan_flag appropriately, supplying the exec caller with appropriate
information through the (temporarily) still in memory PCB.

if: PBC->pid = -2 the process has yet to have been established
if: PBC->pid = -1 the process has failed to load for some reason
else: the process has been successfully loaded and assigned a pid

>> A7: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

Process control blocks are allocated in memory and are not neccesarily
removed immediately. 

How do you ensure proper synchronization and avoid race conditions when
P calls wait(C) before C exits? >> P will block on C->PCB->process_wait_sema
until the child signals to the waiter that it has exited.

After C exits? >> C will have signaled on it's PCB->process_wait_sema
to the waiters that it has finished and exited.

How do you ensure that all resources are freed in each case? >> When
a process calls process_exit it will clear out all members that need
clearing (files, child associations, etc.). It sets appropriate orphan
flags, etc for children. Sets it's exited PCB flag and signals its
PCB->process_wait_sema. If the process is orphaned it will clear its
own PCB from memory, else it will rely on it's waiters to get the
information they need and clear its PCB for it.

How about when P terminates without waiting, before C exits? Then
C has been orphaned like described above and will clear its own
resources and remove it's PCB. when it calls process_exit.

After C exits? >> Answered in the above if C exits without being orphaned 
it will clear and resolve all of it's own resources or be adopted to be
cleared.

GEFF: If there are special cases I am uncertain. As of 11/2/2018 all
exec tests passing. The only case I might be able to concive would be
that of a kill signal which might disrupt our implementation.

---- RATIONALE ----

>> A8: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

As described in [A3] the reason we chose to implement access to
user memory in the was we did was partly programmer ease of use.
However, by doing it this way we also have a uniform way of pointer
checking for memory violations. In simple terms we have a memory-
checking bomb dog that will not allow improper pointers.

Invalud user assignments are handled in exception.c.

>> A9: What advantages or disadvantages can you see to your design
>> for file descriptors?

The advantage to our design is that responsibility for cleanup is
passed onto processes. This decreases the complexity of kernel
management and passed the responsibility to processes. Like a
parent expecting kids to cleanup after they're done playing.

On the other hand if the responsibility were given to the OS
to manage it would increase the complexity of kernel management
but decrease everything to a single point of failure. The
kernel would manage what files had access to an open file
and would be responsible for closing out file descriptors that
are no longer in use by any process and manage process groups
with open file descriptors.

We feel we went with the simpler to implement for programmers
solution, giving responsibility to processes to clean up.
